@using System.Text
@using Sandbox.UI;

@namespace Woosh.Espionage.UI
@attribute [StyleSheet]

@inherits Panel;

<root class="slot-bar">
    @for (var i = 0; i < Infos.Length; i++)
    {
        <div class="@GetSlotClass(i)">
            <img class="slot-icon" src="@(GetSlotImage(i))" alt="Icon"/>
            <label class="slot-item" text="@(Infos[i].Display ?? "Unknown")"></label>
            <label class="slot-name" text="@(GetSlotName(i))"></label>
        </div>
    }
</root>

@code {

    public InventoryDeployableHotbar()
    {
        Infos = new EntityInfo[5];
    }

    private string GetSlotImage(int slot)
    {
        return null;
    }

    private string GetSlotName(int slot)
    {
        var carry = (CarrySlot)slot;
        return slot == Active ? carry.ToName() : carry.ToKeyBind();
    }

    private bool ValidSlot(int slot)
    {
        return Infos[slot].Display != null;
    }

    private string GetSlotClass(int slot)
    {
        var stringBuilder = new StringBuilder("slot");

        if (slot == Active)
        {
            stringBuilder.Append(" active");
        }

        stringBuilder.Append(' ');
        stringBuilder.Append(((CarrySlot)slot).ToName().ToLower());

        if (Infos[slot].Display == null)
        {
            stringBuilder.Append(" hidden");
        }

        if (slot >= 2 && (ValidSlot(0) || ValidSlot(1)))
        {
            stringBuilder.Append(" small");
        }

        if (Infos[slot].Display == null)
        {
            stringBuilder.Append(" hidden");
        }

        return stringBuilder.ToString();
    }

    private EntityInfo[] Infos { get; set; }
    private int Active { get; set; }

    public void Remove(int slot)
    {
        Infos[slot - 1] = default;

        if (slot - 1 == Active)
            Active = -1;

        StateHasChanged();
    }

    public void Deploying(int slot)
    {
        Active = slot - 1;
        StateHasChanged();
    }

    public void Assign(int slot, EntityInfo info)
    {
        Infos[slot - 1] = info;
        StateHasChanged();
    }

}
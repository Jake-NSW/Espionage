@using System
@using System.Collections.Generic
@using Sandbox;
@using Sandbox.UI;
@using Woosh.Common
@using Woosh.Signals

@namespace Woosh.Espionage

@inherits Panel;
@attribute [StyleSheet("interaction.scss")]

<root>
    @if (!string.IsNullOrEmpty(Icon) && !string.IsNullOrEmpty(Display))
    {
        <div class="icon">
            <label text="@Icon"></label>
        </div>
    }
    <div style="flex-direction: column; align-items: flex-start;">
        @if (!string.IsNullOrEmpty(Display))
        {
            <label class="hovering" text="@Display"></label>
        }

        <div @ref=Container style="flex-direction: column; align-items: flex-start">
            <!-- Create another thing for each Interaction Opportunity -->
            @foreach (var item in m_Interactions ?? Array.Empty<IEntityInteraction>())
            {
                <div class="container">
                    <div style="position: absolute; height: 100%; background-color: red;"></div>
                    <label class="bind" text="@($"[{item.Indicator.Bind}]")"></label>
                    <label class="action" text="@item.Indicator.Action"></label>
                </div>
            }
        </div>
    </div>
</root>

@code
{
    private Panel Container { get; set; }

    private string Icon { get; set; }
    private string Display { get; set; }

    private Vector3 m_Last;

    private Entity m_Target;

    public override void Tick()
    {
        base.Tick();
        Style.Opacity = 0;

        if (m_Interactions.Count > 0 && m_Target != null)
        {
            m_Last = m_Target.WorldSpaceBounds.Center;
            Style.Opacity = 1;
        }

        for (int i = 0; i < m_Interactions.Count; i++)
        {
            var interaction = m_Interactions[i];
            var child = Container.GetChild(i).GetChild(0);
            child.Style.Width = Length.Percent(interaction.Indicator.Held * 100);
        }

        this.ToWorld(m_Last);
    }

    private IReadOnlyList<IEntityInteraction> m_Interactions = Array.Empty<IEntityInteraction>();

    public void OnInteractionChanged(Event<InteractionTargetChanged> evt)
    {
    // Rebuild UI based on Interactions...
        m_Target = evt.Data.Hovering;
        m_Interactions = evt.Data.Interactions;

        if (evt.Data.Hovering == null)
            return;

    // Get Info
        var info = m_Target.Info();
        Display = info.Name;
        Icon = info.Icon;
    }

    // Hash

    protected override int BuildHash()
    {
        return m_Interactions?.GetHashCode() ?? 0 ^ m_Target?.GetHashCode() ?? 0;
    }
}
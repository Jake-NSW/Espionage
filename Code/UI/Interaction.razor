@using System
@using Sandbox;
@using Sandbox.UI;

@namespace Woosh.Espionage

@inherits Panel;
@attribute [StyleSheet("Code/UI/interaction.scss")]

<root>
    @if (!string.IsNullOrEmpty(Icon) && !string.IsNullOrEmpty(Display))
    {
        <div class="icon">
            <label text="@Icon"></label>
        </div>
    }
    <div style="flex-direction: column; align-items: flex-start;">
        @if (!string.IsNullOrEmpty(Display))
        {
            <label class="hovering" text="@Display"></label>
        }

        <div style="flex-direction: column; align-items: flex-start">
            <!-- Create another thing for each Interaction Opportunity -->
            @foreach (var item in m_Handler?.Interactions ?? Array.Empty<IEntityInteraction>())
            {
                <div class="container">
                    <label class="bind" text="@($"[{item.Indicator.Bind}]")"></label>
                    <label class="action" text="@item.Indicator.Action"></label>
                </div>
            }
        </div>
    </div>
</root>

@code
{
    private string Icon { get; set; }
    private string Display { get; set; }

    private Vector3 m_Last;
    private Entity m_Target;

    public override void Tick()
    {
        base.Tick();
        Style.Opacity = 0;

        if (Game.LocalPawn == null)
            return;

        var components = Game.LocalPawn.Components;
        if (components.TryGet<InteractionHandler>(out var handler) && handler.Interactions.Count > 0)
        {
            if (handler != m_Handler)
                Rebind(handler);

            // Get Info
            var model = (ModelEntity)handler.Hovering;
            var info = (model as IHave<DisplayInfo>)?.Item ?? DisplayInfo.ForType(model.GetType());

            Display = info.Name;
            Icon = info.Icon;

            m_Last = model.WorldSpaceBounds.Center;
            Style.Opacity = 1;
        }

        this.ToWorld(m_Last);
    }

    private void OnEntityChanged(in ValueChangedEvent<Entity> evt)
    {
        // We want the UI to nicely fade out...
        if (evt.New == null)
            return;

        // Rebuild UI based on Interactions...
        m_Target = evt.New;
    }

    // Binding

    private InteractionHandler m_Handler;

    public void Rebind(InteractionHandler handler)
    {
        m_Handler?.Events.Unregister<ValueChangedEvent<Entity>>(OnEntityChanged);
        m_Handler = handler;
        m_Handler?.Events.OnValueChanged<Entity>(OnEntityChanged);
    }

    // Hash

    protected override int BuildHash()
    {
    // This is dumb
        return (Display?.GetHashCode() ?? 0) ^ (m_Target?.GetHashCode() ?? 0);
    }
}
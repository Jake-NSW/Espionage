@using Sandbox;
@using Sandbox.UI;

@namespace Woosh.Espionage

@inherits Panel;
@attribute [StyleSheet("Code/UI/interaction.scss")]

<root>
    @if (!string.IsNullOrEmpty(Icon) && !string.IsNullOrEmpty(Action) && !string.IsNullOrEmpty(Display))
    {
        <div class="icon">
            <label text="@Icon"></label>
        </div>
    }
    <div style="flex-direction: column; align-items: flex-start;">
        @if (!string.IsNullOrEmpty(Display))
        {
            <label class="hovering" text="@Display"></label>
        }
        
        @if (!string.IsNullOrEmpty(Action))
        {
            <div style="flex-direction: column; align-items: flex-start">
                <!-- Create another thing for each Interaction Opportunity -->
                <div class="container">
                    <label class="bind" text="@Bind"></label>
                    <label class="action" text="@Action"></label>
                </div>
            </div>
        }
    </div>
</root>

@code
{
    private string Icon { get; set; }
    private string Display { get; set; }
    private string Bind { get; set; }
    private string Action { get; set; }

    private Vector3 m_Last;
    private Entity m_Target;

    public override void Tick()
    {
        base.Tick();
        Style.Opacity = 0;

        if (Game.LocalPawn == null)
            return;

        if (Game.LocalPawn.Components.TryGet<InteractionHandler>(out var handler) && handler.Hovering.IsValid())
        {
            var model = (ModelEntity)handler.Hovering;
            var info = (model as IHave<DisplayInfo>)?.Item ?? DisplayInfo.ForType(model.GetType());

            Display = info.Name;
            Bind = $"[Bind]";
            Action = "Do Something";
            Icon = info.Icon;

            var handle = model.GetBoneTransform("handle");
            m_Last = handle == Transform.Zero ? model.WorldSpaceBounds.Center : handle.Position;


            m_Target = model;

            Style.Opacity = 1;
        }

        this.ToWorld(m_Last);
    }

    protected override int BuildHash()
    {
        return m_Target?.GetHashCode() ?? 0;
    }

}